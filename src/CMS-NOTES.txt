

                CONTACT MANAGEMENT SYSTEM
            ----------------------------------

    1. Create a new project - ng new contact-app
    2. Run the new project - ng serve --open
    3. Clear the code in app.component.html
    4. Install 3rd party libraries - bootstrap,fontawesome,googlefonts 
            -> Install bootstrap - npm i bootstrap
                ->Configure bootstrap -
                In angular.json 
                   "styles": [
                                "src/styles.css",
                                 "node_modules/bootstrap/dist/css/bootstrap.min.css"

                             ],
                     "scripts": [
                                 "node_modules/bootstrap/dist/js/bootstrap.bundle.js"
                                ]
                ->In index.html 
                    <!-- bootstrap -->
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
                    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
           
            ->Install fontawesome
                -npm install --save @fortawesome/fontawesome-free
                -paste link into index.html ->  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
            ->Use Google Fonts
    5.Create html pages or  Components 
            ->Contact manager - view all contacts - ng g c contactManager    
            ->Add Contacts - add new contacts - ng g c addContacts
            ->View Contact - view particular contact - ng g c viewContact
            ->Edit Contact - edit specific contact - ng g c editContact

    6. Setup path for each component  - Routing 
                localhost:4200 -> localhost:4200/contactManager
            Inside app-routing.module.ts file

            { //localhost:4200 -> localhost:4200/contactManager
                path:'',redirectTo:'contactManager',pathMatch:'full'
            },
            //listing all contacts details
             {
                path:'contactManager',component:ContactManagerComponent
            },
    7. <router-outlet></router-outlet>
        -Page to view requested components
    8. Design full pages

    9. API INTEGRATION

        To fetch data and display

        ->Create a server folder 
        ->Inside it, Create db.json file 
        ->Goto jsonplaceholder - my json data - content


        ->Create a package.json file - npm init
        Update package.json as
        ->"start": "json-server --watch db.json --port 3000"

        ->Install npm i json-server

        ->Run backend - npm start

    10.Create Model 
        -Create a model folder in src folder
        -inside in it , create myContact.ts file and  myGroup.ts file

    11. Asynchronous Resolving

        JS               TS
    Promise           Observable  (rxjs - reactive extension javascript) library

    .then()             .subscribe() 
    .catch()             .catch() 

    display all Contact information API - get 
    View all Contact information API - get
    Update all Contact information API -put
    delete all Contact information API -delete

    12. Create Services 
    SERVICES - Pass data from one component to another component
                If different components share the same data then-
                we use to create a service

    ng g s service-name -> ng g s services/api

    13.To Get http methods for api fetching

        -Import HttpClientModule  in app.module.ts

        import {HttpClientModule} from '@angular/common/http';

        import[
            HttpClientModule
        ]

    14. Dependency Injection
        Data share between two dependent classes 
        -It performs inside the constructor
        Constructor -> Is a special member function 
                    -> It executes first in the class


        Syntax for DI -> constructor(access-specifier variable-name : class-name){}

    15 ngOnInit 
        -> It is a lifecycle hook
        -> Starting stage of a component creation
        
    16 Data Binding - Data sharing inside a component (ts,html)

            1 One way data binding(ts->html or html to ts)
               
               i)Component to view (ts->html)

                    1)String Interpolation - {{variablr-name}} (inside in html)
                    


